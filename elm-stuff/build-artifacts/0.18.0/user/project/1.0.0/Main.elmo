var _user$project$Main$renderPlayerWithVote = function (player) {
	var vote = A2(_elm_lang$core$Maybe$withDefault, 'No vote', player.vote);
	return A2(
		_debois$elm_mdl$Material_List$li,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_List$content,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							player.name,
							A2(_elm_lang$core$Basics_ops['++'], ' : ', vote))),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$renderPlayer = function (player) {
	return A2(
		_debois$elm_mdl$Material_List$li,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_List$content,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_List$icon,
						function () {
							var _p0 = player.vote;
							if (_p0.ctor === 'Just') {
								return 'favorite';
							} else {
								return 'favorite_border';
							}
						}(),
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(player.name),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$summarizeVotes = function (players) {
	var toNumber = function (vote) {
		var number = _elm_lang$core$String$toInt(vote);
		var _p1 = number;
		if (_p1.ctor === 'Ok') {
			return _elm_lang$core$Maybe$Just(_p1._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	};
	var votes = A2(
		_elm_lang$core$List$filterMap,
		function (_) {
			return _.vote;
		},
		players);
	var numericVotes = A2(_elm_lang$core$List$filterMap, toNumber, votes);
	var sum = _elm_lang$core$Basics$toFloat(
		_elm_lang$core$List$sum(numericVotes));
	var count = _elm_lang$core$Basics$toFloat(
		_elm_lang$core$List$length(numericVotes));
	var mean = sum / count;
	var consensus = _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Set$size(
			_elm_lang$core$Set$fromList(votes)),
		1);
	var result = consensus ? A2(
		_elm_lang$core$Basics_ops['++'],
		'Everyone agrees üéâ : it\'s ',
		A2(
			_elm_lang$core$Maybe$withDefault,
			'ERROR',
			_elm_lang$core$List$head(votes))) : A2(
		_elm_lang$core$Basics_ops['++'],
		'The mean is : ',
		_elm_lang$core$Basics$toString(
			_elm_lang$core$Basics$round(mean)));
	return _elm_lang$html$Html$text(result);
};
var _user$project$Main$votersRemaining = function (players) {
	var voteCount = _elm_lang$core$List$length(
		A2(
			_elm_lang$core$List$filter,
			function (_p2) {
				return A2(
					F2(
						function (x, y) {
							return !_elm_lang$core$Native_Utils.eq(x, y);
						}),
					_elm_lang$core$Maybe$Nothing,
					function (_) {
						return _.vote;
					}(_p2));
			},
			players));
	var playerCount = _elm_lang$core$List$length(players);
	return playerCount - voteCount;
};
var _user$project$Main$showVotingProgress = function (players) {
	var remaining = _user$project$Main$votersRemaining(players);
	var pluralize = !_elm_lang$core$Native_Utils.eq(remaining, 1);
	var plural = pluralize ? 's' : '';
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'Voting progress : ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(remaining),
			A2(
				_elm_lang$core$Basics_ops['++'],
				' vote',
				A2(_elm_lang$core$Basics_ops['++'], plural, ' remaining'))));
};
var _user$project$Main$possibleVotes = {
	ctor: '::',
	_0: '1',
	_1: {
		ctor: '::',
		_0: '2',
		_1: {
			ctor: '::',
			_0: '3',
			_1: {
				ctor: '::',
				_0: '5',
				_1: {
					ctor: '::',
					_0: '8',
					_1: {
						ctor: '::',
						_0: '13',
						_1: {
							ctor: '::',
							_0: '?',
							_1: {
								ctor: '::',
								_0: '‚òï',
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	}
};
var _user$project$Main$viewJoinSuccess = function (model) {
	return A2(
		_debois$elm_mdl$Material_Card$view,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Card$title,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Card$head,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Welcome, ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										model.userName,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'. You have successfully joined room ',
											A2(_elm_lang$core$Basics_ops['++'], model.roomNumber, '. üç∫ Wait for the dealer to determine a development goal.'))))),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$joinRoom = function (model) {
	var host = model.webSocketHost;
	return A2(
		_elm_lang$websocket$WebSocket$send,
		host,
		A2(
			_elm_lang$core$Json_Encode$encode,
			0,
			_elm_lang$core$Json_Encode$object(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'type',
						_1: _elm_lang$core$Json_Encode$string('join_room')
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'room_number',
							_1: _elm_lang$core$Json_Encode$string(model.roomNumber)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'name',
								_1: _elm_lang$core$Json_Encode$string(model.userName)
							},
							_1: {ctor: '[]'}
						}
					}
				})));
};
var _user$project$Main$sendGoal = F2(
	function (playerId, model) {
		var goal = _elm_lang$core$String$isEmpty(model.nextGoal) ? model.currentGoal : model.nextGoal;
		var host = model.webSocketHost;
		return A2(
			_elm_lang$websocket$WebSocket$send,
			host,
			A2(
				_elm_lang$core$Json_Encode$encode,
				0,
				_elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'type',
							_1: _elm_lang$core$Json_Encode$string('send_goal')
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'goal',
								_1: _elm_lang$core$Json_Encode$string(goal)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'room_number',
									_1: _elm_lang$core$Json_Encode$string(model.roomNumber)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'player_id',
										_1: _elm_lang$core$Json_Encode$string(playerId)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					})));
	});
var _user$project$Main$createGoal = function (model) {
	var host = model.webSocketHost;
	return A2(
		_elm_lang$websocket$WebSocket$send,
		host,
		A2(
			_elm_lang$core$Json_Encode$encode,
			0,
			_elm_lang$core$Json_Encode$object(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'type',
						_1: _elm_lang$core$Json_Encode$string('create_goal')
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'goal',
							_1: _elm_lang$core$Json_Encode$string(model.nextGoal)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'room_number',
								_1: _elm_lang$core$Json_Encode$string(model.roomNumber)
							},
							_1: {ctor: '[]'}
						}
					}
				})));
};
var _user$project$Main$sendVote = F2(
	function (model, vote) {
		var host = model.webSocketHost;
		return A2(
			_elm_lang$websocket$WebSocket$send,
			host,
			A2(
				_elm_lang$core$Json_Encode$encode,
				0,
				_elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'type',
							_1: _elm_lang$core$Json_Encode$string('new_vote')
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'vote',
								_1: _elm_lang$core$Json_Encode$string(vote)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'player_id',
									_1: _elm_lang$core$Json_Encode$string(model.userId)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'room_number',
										_1: _elm_lang$core$Json_Encode$string(model.roomNumber)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					})));
	});
var _user$project$Main$createRoom = function (model) {
	var host = model.webSocketHost;
	return A2(
		_elm_lang$websocket$WebSocket$send,
		host,
		A2(
			_elm_lang$core$Json_Encode$encode,
			0,
			_elm_lang$core$Json_Encode$object(
				{
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'type',
						_1: _elm_lang$core$Json_Encode$string('create_room')
					},
					_1: {ctor: '[]'}
				})));
};
var _user$project$Main$hasVoted = function (player) {
	var _p3 = player.vote;
	if (_p3.ctor === 'Just') {
		return true;
	} else {
		return false;
	}
};
var _user$project$Main$Flags = function (a) {
	return {websocketHost: a};
};
var _user$project$Main$Player = F3(
	function (a, b, c) {
		return {name: a, id: b, vote: c};
	});
var _user$project$Main$resetVotes = function (players) {
	return A2(
		_elm_lang$core$List$map,
		function (player) {
			return A3(_user$project$Main$Player, player.name, player.id, _elm_lang$core$Maybe$Nothing);
		},
		players);
};
var _user$project$Main$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return {user: a, players: b, userName: c, userId: d, roomNumber: e, currentGoal: f, nextGoal: g, currentVote: h, page: i, error: j, webSocketHost: k, serverError: l, chainCommand: m, mdl: n};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Main$Bidder = {ctor: 'Bidder'};
var _user$project$Main$Dealer = {ctor: 'Dealer'};
var _user$project$Main$ResultsPage = {ctor: 'ResultsPage'};
var _user$project$Main$VotingPage = {ctor: 'VotingPage'};
var _user$project$Main$JoinFailure = {ctor: 'JoinFailure'};
var _user$project$Main$JoinSuccess = {ctor: 'JoinSuccess'};
var _user$project$Main$RoomSuccess = {ctor: 'RoomSuccess'};
var _user$project$Main$HomePage = {ctor: 'HomePage'};
var _user$project$Main$init = function (flags) {
	return {
		ctor: '_Tuple2',
		_0: {
			user: _user$project$Main$Bidder,
			players: {ctor: '[]'},
			userName: '',
			userId: '',
			roomNumber: '',
			currentGoal: '',
			nextGoal: '',
			currentVote: '',
			page: _user$project$Main$HomePage,
			error: _elm_lang$core$Maybe$Nothing,
			webSocketHost: flags.websocketHost,
			chainCommand: _elm_lang$core$Maybe$Nothing,
			serverError: _elm_lang$core$Maybe$Nothing,
			mdl: _debois$elm_mdl$Material$model
		},
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$Main$GoalError = {ctor: 'GoalError'};
var _user$project$Main$RoomNumberError = {ctor: 'RoomNumberError'};
var _user$project$Main$NameError = {ctor: 'NameError'};
var _user$project$Main$NewVoteError = {ctor: 'NewVoteError'};
var _user$project$Main$NewGoalError = {ctor: 'NewGoalError'};
var _user$project$Main$RemovePlayerError = {ctor: 'RemovePlayerError'};
var _user$project$Main$AddPlayerError = {ctor: 'AddPlayerError'};
var _user$project$Main$JoinRoomError = {ctor: 'JoinRoomError'};
var _user$project$Main$CreateRoomError = {ctor: 'CreateRoomError'};
var _user$project$Main$decodeServerMsg = F2(
	function (json, model) {
		var type_ = A2(
			_elm_lang$core$Result$withDefault,
			'404',
			A2(
				_elm_lang$core$Json_Decode$decodeString,
				A2(_elm_lang$core$Json_Decode$field, 'type', _elm_lang$core$Json_Decode$string),
				json));
		var _p4 = type_;
		switch (_p4) {
			case 'room_success':
				var userId = A2(
					_elm_lang$core$Json_Decode$decodeString,
					A2(_elm_lang$core$Json_Decode$field, 'player_id', _elm_lang$core$Json_Decode$string),
					json);
				var roomNumber = A2(
					_elm_lang$core$Json_Decode$decodeString,
					A2(_elm_lang$core$Json_Decode$field, 'room_number', _elm_lang$core$Json_Decode$string),
					json);
				var _p5 = {ctor: '_Tuple2', _0: roomNumber, _1: userId};
				if (((_p5.ctor === '_Tuple2') && (_p5._0.ctor === 'Ok')) && (_p5._1.ctor === 'Ok')) {
					var _p6 = _p5._1._0;
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							page: _user$project$Main$RoomSuccess,
							user: _user$project$Main$Dealer,
							roomNumber: _p5._0._0,
							userId: _p6,
							players: {
								ctor: '::',
								_0: A3(_user$project$Main$Player, model.userName, _p6, _elm_lang$core$Maybe$Nothing),
								_1: model.players
							}
						});
				} else {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							serverError: _elm_lang$core$Maybe$Just(_user$project$Main$CreateRoomError)
						});
				}
			case 'join_failure':
				return _elm_lang$core$Native_Utils.update(
					model,
					{page: _user$project$Main$JoinFailure, roomNumber: ''});
			case 'join_success':
				var userId = A2(
					_elm_lang$core$Json_Decode$decodeString,
					A2(_elm_lang$core$Json_Decode$field, 'player_id', _elm_lang$core$Json_Decode$string),
					json);
				var _p7 = userId;
				if (_p7.ctor === 'Ok') {
					return _elm_lang$core$Native_Utils.update(
						model,
						{page: _user$project$Main$JoinSuccess, userId: _p7._0});
				} else {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							serverError: _elm_lang$core$Maybe$Just(_user$project$Main$JoinRoomError)
						});
				}
			case 'add_player':
				var playerId = A2(
					_elm_lang$core$Json_Decode$decodeString,
					A2(_elm_lang$core$Json_Decode$field, 'player_id', _elm_lang$core$Json_Decode$string),
					json);
				var playerName = A2(
					_elm_lang$core$Json_Decode$decodeString,
					A2(_elm_lang$core$Json_Decode$field, 'player_name', _elm_lang$core$Json_Decode$string),
					json);
				var _p8 = {ctor: '_Tuple2', _0: playerName, _1: playerId};
				if (((_p8.ctor === '_Tuple2') && (_p8._0.ctor === 'Ok')) && (_p8._1.ctor === 'Ok')) {
					var _p9 = _p8._1._0;
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							players: {
								ctor: '::',
								_0: A3(_user$project$Main$Player, _p8._0._0, _p9, _elm_lang$core$Maybe$Nothing),
								_1: model.players
							},
							chainCommand: _elm_lang$core$Maybe$Just(
								A2(_user$project$Main$sendGoal, _p9, model))
						});
				} else {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							serverError: _elm_lang$core$Maybe$Just(_user$project$Main$AddPlayerError)
						});
				}
			case 'remove_player':
				var playerId = A2(
					_elm_lang$core$Json_Decode$decodeString,
					A2(_elm_lang$core$Json_Decode$field, 'player_id', _elm_lang$core$Json_Decode$string),
					json);
				var _p10 = playerId;
				if (_p10.ctor === 'Ok') {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							players: A2(
								_elm_lang$core$List$filter,
								function (_p11) {
									return A2(
										F2(
											function (x, y) {
												return !_elm_lang$core$Native_Utils.eq(x, y);
											}),
										_p10._0,
										function (_) {
											return _.id;
										}(_p11));
								},
								model.players)
						});
				} else {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							serverError: _elm_lang$core$Maybe$Just(_user$project$Main$RemovePlayerError)
						});
				}
			case 'new_goal':
				var newGoal = A2(
					_elm_lang$core$Json_Decode$decodeString,
					A2(_elm_lang$core$Json_Decode$field, 'goal', _elm_lang$core$Json_Decode$string),
					json);
				var _p12 = newGoal;
				if (_p12.ctor === 'Ok') {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							page: _user$project$Main$VotingPage,
							currentGoal: _p12._0,
							nextGoal: '',
							currentVote: '',
							error: _elm_lang$core$Maybe$Nothing,
							players: _user$project$Main$resetVotes(model.players)
						});
				} else {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							serverError: _elm_lang$core$Maybe$Just(_user$project$Main$NewGoalError)
						});
				}
			case 'new_vote':
				var playerId = A2(
					_elm_lang$core$Json_Decode$decodeString,
					A2(_elm_lang$core$Json_Decode$field, 'player_id', _elm_lang$core$Json_Decode$string),
					json);
				var newVote = A2(
					_elm_lang$core$Json_Decode$decodeString,
					A2(_elm_lang$core$Json_Decode$field, 'vote', _elm_lang$core$Json_Decode$string),
					json);
				var _p13 = {ctor: '_Tuple2', _0: newVote, _1: playerId};
				if (((_p13.ctor === '_Tuple2') && (_p13._0.ctor === 'Ok')) && (_p13._1.ctor === 'Ok')) {
					var players = A2(
						_elm_lang$core$List$map,
						function (player) {
							return _elm_lang$core$Native_Utils.eq(player.id, _p13._1._0) ? A3(
								_user$project$Main$Player,
								player.name,
								player.id,
								_elm_lang$core$Maybe$Just(_p13._0._0)) : player;
						},
						model.players);
					var page = A2(_elm_lang$core$List$all, _user$project$Main$hasVoted, players) ? _user$project$Main$ResultsPage : _user$project$Main$VotingPage;
					return _elm_lang$core$Native_Utils.update(
						model,
						{players: players, page: page});
				} else {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							serverError: _elm_lang$core$Maybe$Just(_user$project$Main$NewVoteError)
						});
				}
			default:
				return model;
		}
	});
var _user$project$Main$UnidentifiedError = {ctor: 'UnidentifiedError'};
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p14 = msg;
		switch (_p14.ctor) {
			case 'CreateRoom':
				return _elm_lang$core$String$isEmpty(model.userName) ? A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Maybe$Just(_user$project$Main$NameError)
						}),
					{
						ctor: '::',
						_0: _elm_lang$core$Platform_Cmd$none,
						_1: {ctor: '[]'}
					}) : A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _user$project$Main$createRoom(model),
						_1: {ctor: '[]'}
					});
			case 'CreateGoal':
				return _elm_lang$core$String$isEmpty(model.nextGoal) ? A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Maybe$Just(_user$project$Main$GoalError)
						}),
					{
						ctor: '::',
						_0: _elm_lang$core$Platform_Cmd$none,
						_1: {ctor: '[]'}
					}) : A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _user$project$Main$createGoal(model),
						_1: {ctor: '[]'}
					});
			case 'JoinRoom':
				return _elm_lang$core$String$isEmpty(model.roomNumber) ? A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Maybe$Just(_user$project$Main$RoomNumberError)
						}),
					{
						ctor: '::',
						_0: _elm_lang$core$Platform_Cmd$none,
						_1: {ctor: '[]'}
					}) : (_elm_lang$core$String$isEmpty(model.userName) ? A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							error: _elm_lang$core$Maybe$Just(_user$project$Main$NameError)
						}),
					{
						ctor: '::',
						_0: _elm_lang$core$Platform_Cmd$none,
						_1: {ctor: '[]'}
					}) : A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{
						ctor: '::',
						_0: _user$project$Main$joinRoom(model),
						_1: {ctor: '[]'}
					}));
			case 'ServerMsg':
				var newModel = A2(_user$project$Main$decodeServerMsg, _p14._0, model);
				var command = function () {
					var _p15 = newModel.chainCommand;
					if (_p15.ctor === 'Just') {
						return _p15._0;
					} else {
						return _elm_lang$core$Platform_Cmd$none;
					}
				}();
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						newModel,
						{chainCommand: _elm_lang$core$Maybe$Nothing}),
					{
						ctor: '::',
						_0: command,
						_1: {ctor: '[]'}
					});
			case 'UpdateName':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{userName: _p14._0}),
					{
						ctor: '::',
						_0: _elm_lang$core$Platform_Cmd$none,
						_1: {ctor: '[]'}
					});
			case 'UpdateNextGoal':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{nextGoal: _p14._0}),
					{
						ctor: '::',
						_0: _elm_lang$core$Platform_Cmd$none,
						_1: {ctor: '[]'}
					});
			case 'UpdateRoomNumber':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{roomNumber: _p14._0}),
					{
						ctor: '::',
						_0: _elm_lang$core$Platform_Cmd$none,
						_1: {ctor: '[]'}
					});
			case 'UpdateVote':
				var _p16 = _p14._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{currentVote: _p16}),
					{
						ctor: '::',
						_0: A2(_user$project$Main$sendVote, model, _p16),
						_1: {ctor: '[]'}
					});
			case 'GoHome':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{page: _user$project$Main$HomePage}),
					{
						ctor: '::',
						_0: _elm_lang$core$Platform_Cmd$none,
						_1: {ctor: '[]'}
					});
			default:
				return A3(_debois$elm_mdl$Material$update, _user$project$Main$Mdl, _p14._0, model);
		}
	});
var _user$project$Main$GoHome = {ctor: 'GoHome'};
var _user$project$Main$viewJoinFailure = function (model) {
	return A2(
		_debois$elm_mdl$Material_Card$view,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Card$title,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Card$head,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('No such room. üòî'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Card$actions,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A5(
							_debois$elm_mdl$Material_Button$render,
							_user$project$Main$Mdl,
							{
								ctor: '::',
								_0: 3,
								_1: {
									ctor: '::',
									_0: 0,
									_1: {ctor: '[]'}
								}
							},
							model.mdl,
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Button$raised,
								_1: {
									ctor: '::',
									_0: _debois$elm_mdl$Material_Button$colored,
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Button$ripple,
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Main$GoHome),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Back to safety'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$UpdateVote = function (a) {
	return {ctor: 'UpdateVote', _0: a};
};
var _user$project$Main$viewVotingPage = function (model) {
	return A2(
		_debois$elm_mdl$Material_Grid$grid,
		{ctor: '[]'},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Grid$cell,
					{
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 6),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Card$view,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Card$title,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Card$head,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(model.currentGoal),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Card$text,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Place your bet: '),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Grid$cell,
						{
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 6),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$List$indexedMap,
					F2(
						function (index, vote) {
							return A2(
								_debois$elm_mdl$Material_Grid$cell,
								{
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 1),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A5(
										_debois$elm_mdl$Material_Button$render,
										_user$project$Main$Mdl,
										{
											ctor: '::',
											_0: 4,
											_1: {
												ctor: '::',
												_0: index,
												_1: {ctor: '[]'}
											}
										},
										model.mdl,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Button$raised,
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.eq(vote, model.currentVote) ? _debois$elm_mdl$Material_Button$colored : _debois$elm_mdl$Material_Button$accent,
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Button$ripple,
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$onClick(
															_user$project$Main$UpdateVote(vote)),
														_1: {ctor: '[]'}
													}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(vote),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								});
						}),
					_user$project$Main$possibleVotes),
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Grid$cell,
						{
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 4),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.eq(model.user, _user$project$Main$Dealer) ? A2(
							_debois$elm_mdl$Material_Grid$cell,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Card$view,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Card$text,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													_user$project$Main$showVotingProgress(model.players)),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Card$actions,
												{ctor: '[]'},
												A2(_elm_lang$core$List$map, _user$project$Main$renderPlayer, model.players)),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}) : A2(
							_debois$elm_mdl$Material_Grid$cell,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				})));
};
var _user$project$Main$UpdateNextGoal = function (a) {
	return {ctor: 'UpdateNextGoal', _0: a};
};
var _user$project$Main$UpdateRoomNumber = function (a) {
	return {ctor: 'UpdateRoomNumber', _0: a};
};
var _user$project$Main$UpdateName = function (a) {
	return {ctor: 'UpdateName', _0: a};
};
var _user$project$Main$ServerMsg = function (a) {
	return {ctor: 'ServerMsg', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$websocket$WebSocket$listen, model.webSocketHost, _user$project$Main$ServerMsg);
};
var _user$project$Main$JoinRoom = {ctor: 'JoinRoom'};
var _user$project$Main$CreateGoal = {ctor: 'CreateGoal'};
var _user$project$Main$viewRoomSuccess = function (model) {
	return A2(
		_debois$elm_mdl$Material_Grid$grid,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Grid$cell,
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 6),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Card$view,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Card$title,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Card$head,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'Well done, ',
													A2(
														_elm_lang$core$Basics_ops['++'],
														model.userName,
														A2(
															_elm_lang$core$Basics_ops['++'],
															'. Your room was successfully created! Tell your friends. üçª Your room number is ',
															A2(_elm_lang$core$Basics_ops['++'], model.roomNumber, '.'))))),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Grid$cell,
					{
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 6),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Card$view,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Card$title,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Card$head,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Enter your first development goal: '),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Card$actions,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A5(
												_debois$elm_mdl$Material_Textfield$render,
												_user$project$Main$Mdl,
												{
													ctor: '::',
													_0: 1,
													_1: {
														ctor: '::',
														_0: 0,
														_1: {ctor: '[]'}
													}
												},
												model.mdl,
												{
													ctor: '::',
													_0: _debois$elm_mdl$Material_Textfield$value(model.nextGoal),
													_1: {
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_Options$when,
															_elm_lang$core$Native_Utils.eq(
																model.error,
																_elm_lang$core$Maybe$Just(_user$project$Main$GoalError)),
															_debois$elm_mdl$Material_Textfield$error('Please enter a goal')),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Options$onInput(_user$project$Main$UpdateNextGoal),
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Textfield$textarea,
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{ctor: '[]'}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Card$actions,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A5(
													_debois$elm_mdl$Material_Button$render,
													_user$project$Main$Mdl,
													{
														ctor: '::',
														_0: 1,
														_1: {
															ctor: '::',
															_0: 1,
															_1: {ctor: '[]'}
														}
													},
													model.mdl,
													{
														ctor: '::',
														_0: _debois$elm_mdl$Material_Button$raised,
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Button$colored,
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Button$ripple,
																_1: {
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Main$CreateGoal),
																	_1: {ctor: '[]'}
																}
															}
														}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Play poker'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Grid$cell,
						{
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 6),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A3(
								_debois$elm_mdl$Material_Options$styled,
								_elm_lang$html$Html$h4,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Typography$headline,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Currently in room: '),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_List$ul,
									{ctor: '[]'},
									A2(
										_elm_lang$core$List$map,
										function (_p17) {
											return A2(
												_debois$elm_mdl$Material_List$li,
												{ctor: '[]'},
												function (name) {
													return {
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_List$content,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(name),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													};
												}(
													function (_) {
														return _.name;
													}(_p17)));
										},
										model.players)),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$viewResultsPage = function (model) {
	return A2(
		_debois$elm_mdl$Material_Grid$grid,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Grid$cell,
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 6),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Card$view,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Card$title,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Card$head,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												A2(_elm_lang$core$Basics_ops['++'], 'Goal : ', model.currentGoal)),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Grid$cell,
					{
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 6),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Card$view,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Card$title,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Card$head,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _user$project$Main$summarizeVotes(model.players),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Grid$cell,
						{
							ctor: '::',
							_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 6),
							_1: {ctor: '[]'}
						},
						_elm_lang$core$Native_Utils.eq(model.user, _user$project$Main$Dealer) ? A2(_elm_lang$core$List$map, _user$project$Main$renderPlayerWithVote, model.players) : {ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.eq(model.user, _user$project$Main$Dealer) ? A2(
							_debois$elm_mdl$Material_Grid$cell,
							{
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 6),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Card$view,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Card$title,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Card$head,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Enter your next development goal: '),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Card$actions,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A5(
														_debois$elm_mdl$Material_Textfield$render,
														_user$project$Main$Mdl,
														{
															ctor: '::',
															_0: 5,
															_1: {
																ctor: '::',
																_0: 0,
																_1: {ctor: '[]'}
															}
														},
														model.mdl,
														{
															ctor: '::',
															_0: _debois$elm_mdl$Material_Textfield$value(model.nextGoal),
															_1: {
																ctor: '::',
																_0: A2(
																	_debois$elm_mdl$Material_Options$when,
																	_elm_lang$core$Native_Utils.eq(
																		model.error,
																		_elm_lang$core$Maybe$Just(_user$project$Main$GoalError)),
																	_debois$elm_mdl$Material_Textfield$error('Please enter a goal')),
																_1: {
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Options$onInput(_user$project$Main$UpdateNextGoal),
																	_1: {
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Textfield$textarea,
																		_1: {ctor: '[]'}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Card$actions,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A5(
															_debois$elm_mdl$Material_Button$render,
															_user$project$Main$Mdl,
															{
																ctor: '::',
																_0: 5,
																_1: {
																	ctor: '::',
																	_0: 1,
																	_1: {ctor: '[]'}
																}
															},
															model.mdl,
															{
																ctor: '::',
																_0: _debois$elm_mdl$Material_Button$raised,
																_1: {
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Button$colored,
																	_1: {
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Button$ripple,
																		_1: {
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Main$CreateGoal),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Next round'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							}) : A2(
							_debois$elm_mdl$Material_Grid$cell,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$CreateRoom = {ctor: 'CreateRoom'};
var _user$project$Main$viewHomePage = function (model) {
	return A2(
		_debois$elm_mdl$Material_Grid$grid,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_debois$elm_mdl$Material_Grid$cell,
				{
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 6),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_debois$elm_mdl$Material_Card$view,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Card$actions,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A5(
										_debois$elm_mdl$Material_Textfield$render,
										_user$project$Main$Mdl,
										{
											ctor: '::',
											_0: 0,
											_1: {
												ctor: '::',
												_0: 0,
												_1: {ctor: '[]'}
											}
										},
										model.mdl,
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Textfield$label('Your name'),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Textfield$value(model.userName),
													_1: {
														ctor: '::',
														_0: A2(
															_debois$elm_mdl$Material_Options$when,
															_elm_lang$core$Native_Utils.eq(
																model.error,
																_elm_lang$core$Maybe$Just(_user$project$Main$NameError)),
															_debois$elm_mdl$Material_Textfield$error('Please enter a name')),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Options$onInput(_user$project$Main$UpdateName),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_debois$elm_mdl$Material_Grid$cell,
					{
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$All, 6),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_debois$elm_mdl$Material_Card$view,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_debois$elm_mdl$Material_Card$text,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Card$expand,
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {
									ctor: '::',
									_0: A2(
										_debois$elm_mdl$Material_Card$actions,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: A5(
												_debois$elm_mdl$Material_Button$render,
												_user$project$Main$Mdl,
												{
													ctor: '::',
													_0: 0,
													_1: {
														ctor: '::',
														_0: 1,
														_1: {ctor: '[]'}
													}
												},
												model.mdl,
												{
													ctor: '::',
													_0: _debois$elm_mdl$Material_Button$raised,
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Button$ripple,
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Button$colored,
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Main$CreateRoom),
																_1: {ctor: '[]'}
															}
														}
													}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Create a room'),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Card$text,
											{
												ctor: '::',
												_0: _debois$elm_mdl$Material_Card$expand,
												_1: {ctor: '[]'}
											},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Card$actions,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: A5(
														_debois$elm_mdl$Material_Textfield$render,
														_user$project$Main$Mdl,
														{
															ctor: '::',
															_0: 0,
															_1: {
																ctor: '::',
																_0: 2,
																_1: {ctor: '[]'}
															}
														},
														model.mdl,
														{
															ctor: '::',
															_0: _debois$elm_mdl$Material_Textfield$label('Existing room number'),
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
																_1: {
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Textfield$value(model.roomNumber),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_debois$elm_mdl$Material_Options$when,
																			_elm_lang$core$Native_Utils.eq(
																				model.error,
																				_elm_lang$core$Maybe$Just(_user$project$Main$RoomNumberError)),
																			_debois$elm_mdl$Material_Textfield$error('Please enter a room number')),
																		_1: {
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Options$onInput(_user$project$Main$UpdateRoomNumber),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														},
														{ctor: '[]'}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Card$actions,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: A5(
															_debois$elm_mdl$Material_Button$render,
															_user$project$Main$Mdl,
															{
																ctor: '::',
																_0: 0,
																_1: {
																	ctor: '::',
																	_0: 3,
																	_1: {ctor: '[]'}
																}
															},
															model.mdl,
															{
																ctor: '::',
																_0: _debois$elm_mdl$Material_Button$raised,
																_1: {
																	ctor: '::',
																	_0: _debois$elm_mdl$Material_Button$colored,
																	_1: {
																		ctor: '::',
																		_0: _debois$elm_mdl$Material_Button$ripple,
																		_1: {
																			ctor: '::',
																			_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Main$JoinRoom),
																			_1: {ctor: '[]'}
																		}
																	}
																}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Join a room'),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$viewPage = function (model) {
	var serverError = model.serverError;
	var rendering = function () {
		var _p18 = model.page;
		switch (_p18.ctor) {
			case 'HomePage':
				return _user$project$Main$viewHomePage(model);
			case 'RoomSuccess':
				return _user$project$Main$viewRoomSuccess(model);
			case 'JoinSuccess':
				return _user$project$Main$viewJoinSuccess(model);
			case 'JoinFailure':
				return _user$project$Main$viewJoinFailure(model);
			case 'VotingPage':
				return _elm_lang$core$String$isEmpty(model.currentGoal) ? _user$project$Main$viewJoinSuccess(model) : _user$project$Main$viewVotingPage(model);
			default:
				return _user$project$Main$viewResultsPage(model);
		}
	}();
	return A3(
		_debois$elm_mdl$Material_Scheme$topWithScheme,
		_debois$elm_mdl$Material_Color$Teal,
		_debois$elm_mdl$Material_Color$LightGreen,
		A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: rendering,
				_1: {
					ctor: '::',
					_0: A3(
						_debois$elm_mdl$Material_Options$styled,
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Typography$title,
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Typography$center,
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: (!_elm_lang$core$Native_Utils.eq(serverError, _elm_lang$core$Maybe$Nothing)) ? _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Server error: ',
									_elm_lang$core$Basics$toString(
										A2(_elm_lang$core$Maybe$withDefault, _user$project$Main$UnidentifiedError, serverError)))) : _elm_lang$html$Html$text(''),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}));
};
var _user$project$Main$view = function (model) {
	return A4(
		_debois$elm_mdl$Material_Layout$render,
		_user$project$Main$Mdl,
		model.mdl,
		{
			ctor: '::',
			_0: _debois$elm_mdl$Material_Layout$fixedHeader,
			_1: {ctor: '[]'}
		},
		{
			header: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h1,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding', _1: '2rem'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Planning poker',
								(!_elm_lang$core$String$isEmpty(model.roomNumber)) ? A2(_elm_lang$core$Basics_ops['++'], ' @ room ', model.roomNumber) : '')),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			drawer: {ctor: '[]'},
			tabs: {
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			main: {
				ctor: '::',
				_0: _user$project$Main$viewPage(model),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (websocketHost) {
			return _elm_lang$core$Json_Decode$succeed(
				{websocketHost: websocketHost});
		},
		A2(_elm_lang$core$Json_Decode$field, 'websocketHost', _elm_lang$core$Json_Decode$string)));
